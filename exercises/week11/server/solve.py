import copy
from Crypto.Util.number import long_to_bytes
from gmpy2 import invert

p = 92582184765240663364795767694262273105045150785272129481762171937885924776597
q = 107310528658039985708896636559112400334262005367649176746429531274300859498993
n = p * q
phi = (p - 1) * (q - 1)
e = 950501
d = invert(e, phi)
c1 = [0x0000000000000063, 0x0000000000000055, 0x0000000000000004, 0x0000000000000003, 0x0000000000000005, 0x0000000000000005, 0x0000000000000005, 0x0000000000000003, 0x0000000000000007, 0x0000000000000007, 0x0000000000000002, 0x0000000000000008, 0x0000000000000008, 0x000000000000000B, 0x0000000000000001, 0x0000000000000002, 0x000000000000000A, 0x0000000000000004, 0x0000000000000002, 0x000000000000000D, 0x0000000000000008, 0x0000000000000009, 0x000000000000000C, 0x0000000000000009, 0x0000000000000004, 0x000000000000000D, 0x0000000000000008, 0x0000000000000000, 0x000000000000000E, 0x0000000000000000, 0x000000000000000F, 0x000000000000000D, 0x000000000000000E, 0x000000000000000A, 0x0000000000000002, 0x0000000000000002, 0x0000000000000001, 0x0000000000000007, 0x0000000000000003, 0x0000000000000005, 0x0000000000000006, 0x0000000000000004, 0x0000000000000006, 0x0000000000000007, 0x0000000000000006, 0x0000000000000002, 0x0000000000000002, 0x0000000000000005, 0x0000000000000003, 0x0000000000000003, 0x0000000000000009, 0x0000000000000006, 0x0000000000000000, 0x000000000000000B, 0x000000000000000D, 0x000000000000000B, 0x0000000000000000, 0x0000000000000002, 0x0000000000000003, 0x0000000000000008, 0x0000000000000003, 0x000000000000000B, 0x0000000000000007, 0x0000000000000001, 0x000000000000000B, 0x0000000000000005, 0x000000000000000E, 0x0000000000000005, 0x0000000000000000, 0x000000000000000A, 0x000000000000000E, 0x000000000000000F, 0x000000000000000D, 0x0000000000000007, 0x000000000000000D, 0x0000000000000007, 0x000000000000000E, 0x0000000000000001, 0x000000000000000F, 0x0000000000000001, 0x000000000000000B, 0x0000000000000005, 0x0000000000000006, 0x0000000000000002, 0x000000000000000C, 0x0000000000000006, 0x000000000000000A, 0x0000000000000004, 0x0000000000000001, 0x0000000000000007, 0x0000000000000004, 0x0000000000000002, 0x0000000000000006, 0x0000000000000003, 0x0000000000000006, 0x000000000000000C, 0x0000000000000005, 0x000000000000000C, 0x0000000000000003, 0x000000000000000C, 0x0000000000000006, 0x0000000000000000, 0x0000000000000004, 0x000000000000000F, 0x0000000000000002, 0x000000000000000E, 0x0000000000000007, 0x0000000000000000, 0x000000000000000E, 0x000000000000000E, 0x000000000000000C, 0x0000000000000004, 0x0000000000000003, 0x0000000000000004, 0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, 0x0000000000000006, 0x0000000000000002, 0x0000000000000003, 0x0000000000000006, 0x0000000000000004, 0x0000000000000004, 0x0000000000000004, 0x0000000000000007, 0x0000000000000001, 0x0000000000000002, 0x0000000000000003, 0x0000000000000009, 0x0000000000000002, 0x000000000000000C, 0x0000000000000008, 0x0000000000000001, 0x000000000000000C, 0x0000000000000003, 0x000000000000000C, 0x0000000000000002, 0x0000000000000000, 0x0000000000000003, 0x000000000000000E, 0x0000000000000003, 0x000000000000000E, 0x000000000000000C, 0x0000000000000009, 0x0000000000000001, 0x0000000000000007, 0x000000000000000F, 0x0000000000000005, 0x0000000000000007, 0x0000000000000002, 0x0000000000000002, 0x0000000000000004]
for j in range(256):
    c = copy.deepcopy(c1)
    xor = j
    c[-1] ^= xor
    for i in range(len(c)-2, -1, -1):
        v = xor
        xor ^= c[i]
        c[i] = v
    for i in range(len(c)-1, -1, -1):
        v = xor
        xor ^= c[i]
        c[i] = v
    if xor == 102:
        try:
            c = int("".join(map(chr, c)))
            break
        except:
            continue
m = pow(c, d, n)
print(long_to_bytes(m))
