opcode = [0xF5,
          0xF1, 0xE1, 0x00, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x20, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x01, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x21, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x02, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x22, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x03, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x23, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x04, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x24, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x05, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x25, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x06, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x26, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x07, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x27, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x08, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x28, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x09, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x29, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x0A, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x2A, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x0B, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x2B, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x0C, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x2C, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x0D, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x2D, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x0E, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x2E, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x0F, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x2F, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x10, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x30, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x11, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x31, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x12, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x32, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x13, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x33, 0x00, 0x00, 0x00,
          0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0xF5,
          0xF1, 0xE1, 0x00, 0x00, 0x00, 0x00,
          0xF1, 0xE2, 0x01, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x00, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x01, 0x00, 0x00, 0x00,
          0xF1, 0xE2, 0x02, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x01, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x02, 0x00, 0x00, 0x00,
          0xF1, 0xE2, 0x03, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x02, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x03, 0x00, 0x00, 0x00,
          0xF1, 0xE2, 0x04, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x03, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x04, 0x00, 0x00, 0x00,
          0xF1, 0xE2, 0x05, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x04, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x05, 0x00, 0x00, 0x00,
          0xF1, 0xE2, 0x06, 0x00, 0x00, 0x00,
          0xF2,
          0xF1, 0xE4, 0x05, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x06, 0x00, 0x00, 0x00,
          0xF1, 0xE2, 0x07, 0x00, 0x00, 0x00,
          0xF1, 0xE3, 0x08, 0x00, 0x00, 0x00,
          0xF1, 0xE5, 0x0C, 0x00, 0x00, 0x00,
          0xF6,
          0xF7,
          0xF1, 0xE4, 0x06, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x07, 0x00, 0x00, 0x00,
          0xF1, 0xE2, 0x08, 0x00, 0x00, 0x00,
          0xF1, 0xE3, 0x09, 0x00, 0x00, 0x00,
          0xF1, 0xE5, 0x0C, 0x00, 0x00, 0x00,
          0xF6,
          0xF7,
          0xF1, 0xE4, 0x07, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x08, 0x00, 0x00, 0x00,
          0xF1, 0xE2, 0x09, 0x00, 0x00, 0x00,
          0xF1, 0xE3, 0x0A, 0x00, 0x00, 0x00,
          0xF1, 0xE5, 0x0C, 0x00, 0x00, 0x00,
          0xF6,
          0xF7,
          0xF1, 0xE4, 0x08, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x0D, 0x00, 0x00, 0x00,
          0xF1, 0xE2, 0x13, 0x00, 0x00, 0x00,
          0xF8,
          0xF1, 0xE4, 0x0D, 0x00, 0x00, 0x00,
          0xF1, 0xE7, 0x13, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x0E, 0x00, 0x00, 0x00,
          0xF1, 0xE2, 0x12, 0x00, 0x00, 0x00,
          0xF8,
          0xF1, 0xE4, 0x0E, 0x00, 0x00, 0x00,
          0xF1, 0xE7, 0x12, 0x00, 0x00, 0x00,
          0xF1, 0xE1, 0x0F, 0x00, 0x00, 0x00,
          0xF1, 0xE2, 0x11, 0x00, 0x00, 0x00,
          0xF8,
          0xF1, 0xE4, 0x0F, 0x00, 0x00, 0x00,
          0xF1, 0xE7, 0x11, 0x00, 0x00, 0x00,
          0xF4]
ip = 0
mem = list(range(97, 97+21))+[0]*100
r = [0, 18, 0, 0]
while ip < len(opcode):
    if opcode[ip] != 0:
        print(ip, end=" ")
    if opcode[ip] == 0xf1:
        if opcode[ip + 1] == 0xe1:
            print(f"mov r0, mem[{opcode[ip + 2]}]\t({mem[opcode[ip + 2]]})")
            r[0] = mem[opcode[ip + 2]]
        elif opcode[ip + 1] == 0xe2:
            print(f"mov r1, mem[{opcode[ip + 2]}]\t({mem[opcode[ip + 2]]})")
            r[1] = mem[opcode[ip + 2]]
        elif opcode[ip + 1] == 0xe3:
            print(f"mov r2, mem[{opcode[ip + 2]}]\t({mem[opcode[ip + 2]]})")
            r[2] = mem[opcode[ip + 2]]
        elif opcode[ip + 1] == 0xe4:
            print(f"mov mem[{opcode[ip + 2]}], r0\t({opcode[ip + 2]}, {r[0]}->{r[0]&0xff})")
            mem[opcode[ip + 2]] = r[0]&0xff
        elif opcode[ip + 1] == 0xe5:
            print(f"mov r3, mem[{opcode[ip + 2]}]\t({mem[opcode[ip + 2]]})")
            r[3] = mem[opcode[ip + 2]]
        elif opcode[ip + 1] == 0xe7:
            print(f"mov mem[{opcode[ip + 2]}], r1\t({opcode[ip + 2]}, {r[1]}->{r[1]&0xff})")
            mem[opcode[ip + 2]] = r[1]&0xff
        ip += 6
    elif opcode[ip] == 0xf2:
        print(f"xor r0, r1\t({r[0]}, {r[1]})")
        r[0] ^= r[1]
        ip += 1
    elif opcode[ip] == 0xf5:
        print("buf length == 21")
        ip += 1
    elif opcode[ip] == 0xf4 or opcode[ip] == 0:
        ip += 1
    elif opcode[ip] == 0xf7:
        print(f"mul r0, r3\t({r[0]}, {r[3]})")
        r[0] *= r[3]
        ip += 1
    elif opcode[ip] == 0xf8:
        print(f"chg r0, r1\t({r[0]}, {r[1]})")
        r[0], r[1] = r[1], r[0]
        ip += 1
    elif opcode[ip] == 0xf6:
        print(f"mov r0, r2+2*r1+3*r0\t({r[0]}, {r[1]}, {r[2]})")
        r[0] = r[2] + 2 * r[1] + 3 * r[0]
        ip += 1