import struct

s = ['a'] * 44  # 假设 s 是一个足够大的字符串数组或缓冲区
code = [0xA1, 0xC1, 0x00, 0xB1, 0x77, 0xC2, 0x4A, 0x01, 0x00, 0x00, 0xC1, 0x01, 0xB2, 0x77, 0xC2, 0x19, 0x01, 0x00, 0x00, 0xC1, 0x02, 0xB4, 0x77, 0xC2, 0xDD, 0x01, 0x00, 0x00, 0xC1, 0x03, 0xB3, 0x77, 0xC2, 0x0F, 0x01, 0x00, 0x00, 0xC1, 0x04, 0xB2, 0x77, 0xC2, 0x1B, 0x01, 0x00, 0x00, 0xC1, 0x05, 0xB4, 0x77, 0xC2, 0x89, 0x01, 0x00, 0x00, 0xC1, 0x06, 0xB1, 0x77, 0xC2, 0x19, 0x01, 0x00, 0x00, 0xC1, 0x07, 0xB3, 0x77, 0xC2, 0x54, 0x01, 0x00, 0x00, 0xC1, 0x08, 0xB1, 0x77, 0xC2, 0x4F, 0x01, 0x00, 0x00, 0xC1, 0x09, 0xB1, 0x77, 0xC2, 0x4E, 0x01, 0x00, 0x00, 0xC1, 0x0A, 0xB3, 0x77, 0xC2, 0x55, 0x01, 0x00, 0x00, 0xC1, 0x0B, 0xB3, 0x77, 0xC2, 0x56, 0x01, 0x00, 0x00, 0xC1, 0x0C, 0xB4, 0x77, 0xC2, 0x8E, 0x00, 0x00, 0x00, 0xC1, 0x0D, 0xB2, 0x77, 0xC2, 0x49, 0x00, 0x00, 0x00, 0xC1, 0x0E, 0xB3, 0x77, 0xC2, 0x0E, 0x01, 0x00, 0x00, 0xC1, 0x0F, 0xB1, 0x77, 0xC2, 0x4B, 0x01, 0x00, 0x00, 0xC1, 0x10, 0xB3, 0x77, 0xC2, 0x06, 0x01, 0x00, 0x00, 0xC1, 0x11, 0xB3, 0x77, 0xC2, 0x54, 0x01, 0x00, 0x00, 0xC1, 0x12, 0xB2, 0x77, 0xC2, 0x1A, 0x00, 0x00, 0x00, 0xC1, 0x13, 0xB1, 0x77, 0xC2, 0x42, 0x01, 0x00, 0x00, 0xC1, 0x14, 0xB3, 0x77, 0xC2, 0x53, 0x01, 0x00, 0x00, 0xC1, 0x15, 0xB1, 0x77, 0xC2, 0x1F, 0x01, 0x00, 0x00, 0xC1, 0x16, 0xB3, 0x77, 0xC2, 0x52, 0x01, 0x00, 0x00, 0xC1, 0x17, 0xB4, 0x77, 0xC2, 0xDB, 0x00, 0x00, 0x00, 0xC1, 0x18, 0xB1, 0x77, 0xC2, 0x19, 0x01, 0x00, 0x00, 0xC1, 0x19, 0xB4, 0x77, 0xC2, 0xD9, 0x00, 0x00, 0x00, 0xC1, 0x1A, 0xB1, 0x77, 0xC2, 0x19, 0x01, 0x00, 0x00, 0xC1, 0x1B, 0xB3, 0x77, 0xC2, 0x55, 0x01, 0x00, 0x00, 0xC1, 0x1C, 0xB2, 0x77, 0xC2, 0x19, 0x00, 0x00, 0x00, 0xC1, 0x1D, 0xB3, 0x77, 0xC2, 0x00, 0x01, 0x00, 0x00, 0xC1, 0x1E, 0xB1, 0x77, 0xC2, 0x4B, 0x01, 0x00, 0x00, 0xC1, 0x1F, 0xB2, 0x77, 0xC2, 0x1E, 0x00, 0x00, 0x00, 0xC1, 0x20, 0x80, 0x02, 0x18, 0x00, 0x00, 0x00, 0x23, 0x10, 0xC1, 0x21, 0x80, 0x02, 0x10, 0x00, 0x00, 0x00, 0x23, 0xF7, 0xC1, 0x22, 0x80, 0x02, 0x08, 0x00, 0x00, 0x00, 0x23, 0xF7, 0xC1, 0x23, 0xF7, 0xFE, 0x80, 0x02, 0x05, 0x00, 0x00, 0x00, 0x22, 0x77, 0x10, 0x80, 0x02, 0x07, 0x00, 0x00, 0x00, 0x23, 0x80, 0x02, 0x23, 0x77, 0xF1, 0x98, 0x31, 0x77, 0x10, 0x80, 0x02, 0x18, 0x00, 0x00, 0x00, 0x23, 0x80, 0x02, 0x20, 0xB9, 0xE4, 0x35, 0x31, 0x77, 0x10, 0x80, 0x02, 0x12, 0x00, 0x00, 0x00, 0x22, 0x77, 0xA0, 0xC1, 0x24, 0x80, 0x02, 0x18, 0x00, 0x00, 0x00, 0x23, 0x10, 0xC1, 0x25, 0x80, 0x02, 0x10, 0x00, 0x00, 0x00, 0x23, 0xF7, 0xC1, 0x26, 0x80, 0x02, 0x08, 0x00, 0x00, 0x00, 0x23, 0xF7, 0xC1, 0x27, 0xF7, 0xFE, 0x32, 0x20, 0x43, 0x33, 0x77, 0x80, 0x02, 0x11, 0x00, 0x00, 0x00, 0x22, 0x35, 0x37, 0x38, 0x77, 0x80, 0x02, 0x0D, 0x00, 0x00, 0x00, 0x23, 0x77, 0x38, 0x39, 0x10, 0x32, 0x20, 0x43, 0x33, 0x77, 0x80, 0x02, 0x11, 0x00, 0x00, 0x00, 0x22, 0x35, 0x37, 0x38, 0x77, 0x80, 0x02, 0x0D, 0x00, 0x00, 0x00, 0x23, 0x77, 0x38, 0x39, 0xC7, 0xC1, 0x28, 0x80, 0x02, 0x18, 0x00, 0x00, 0x00, 0x23, 0x10, 0xC1, 0x29, 0x80, 0x02, 0x10, 0x00, 0x00, 0x00, 0x23, 0xF7, 0xC1, 0x2A, 0x80, 0x02, 0x08, 0x00, 0x00, 0x00, 0x23, 0xF7, 0xC1, 0x2B, 0xF7, 0xFE, 0x32, 0x20, 0x43, 0x33, 0x77, 0x80, 0x02, 0x11, 0x00, 0x00, 0x00, 0x22, 0x35, 0x37, 0x38, 0x77, 0x80, 0x02, 0x0D, 0x00, 0x00, 0x00, 0x23, 0x77, 0x38, 0x39, 0x10, 0x32, 0x20, 0x43, 0x33, 0x77, 0x80, 0x02, 0x11, 0x00, 0x00, 0x00, 0x22, 0x35, 0x37, 0x38, 0x77, 0x80, 0x02, 0x0D, 0x00, 0x00, 0x00, 0x23, 0x77, 0x38, 0x39, 0xC8, 0x99]
ip = 0
tmp_list = []
xor_cmp_list = []
while True:
    # print(ip, end=" ")
    if code[ip] == 113:
        print("push ", code[ip + 1])
        ip += 5
    elif code[ip] == 65:
        print("reg1 += reg2")
        ip += 1
    elif code[ip] == 66:
        print("reg1 -= reg4")
        ip += 1
    elif code[ip] == 67:
        print("reg1 *= reg3")
        ip += 1
    elif code[ip] == 55:
        print("reg1 = reg5")
        ip += 1
    elif code[ip] == 56:
        print("reg1 ^= reg4")
        ip += 1
    elif code[ip] == 57:
        print("reg1 ^= reg5")
        ip += 1
    elif code[ip] == 53:
        print("reg5 = reg1")
        ip += 1
    elif code[ip] == 0xF7:
        print("tmp += reg1")
        ip += 1
    elif code[ip] == 68:
        print("reg1 /= reg5")
        ip += 1
    elif code[ip] == 0x80:
        print(f"reg2 = {struct.unpack('<I', bytes(code[ip+2:ip+6]))[0]}")
        ip += 6
    elif code[ip] == 119:
        print("reg1 ^= tmp")
        ip += 1
    elif code[ip] == 83:
        print(f"putchar reg3")
        ip += 2
    elif code[ip] == 34:
        print("reg1 >>= reg2")
        ip += 1
    elif code[ip] == 35:
        print("reg1 <<= reg2")
        ip += 1
    elif code[ip] == 0x99:
        print("End of processing")
        break
    elif code[ip] == 118:
        print("pop reg3")
        ip += 5
    elif code[ip] == 84:
        print(f"getchar reg3")
        ip += 2
    elif code[ip] == 48:
        print("reg1 |= reg2")
        ip += 1
    elif code[ip] == 49:
        print("reg1 &= reg2")
        ip += 1
    elif code[ip] == 50:
        print(f"reg3 = {code[ip+1]}")
        ip += 2
    elif code[ip] == 9:
        print("reg1 = 0x6FEBF967")
        ip += 1
    elif code[ip] == 16:
        print("tmp = reg1")
        ip += 1
    elif code[ip] == 51:
        print("reg4 = reg1")
        ip += 1
    elif code[ip] == 52:
        print(f"reg2 = {code[ip+1]}")
        ip += 2
    elif code[ip] == 0xFE:
        print("reg1 = tmp")
        ip += 1
    elif code[ip] == 17:
        print("print reg1")
        ip += 1
    elif code[ip] == 0xA0:
        print("cmp reg1, 0x6FEBF967")
        ip += 1
    elif code[ip] == 0xA1:
        print("input len=44")
        ip += 1
    elif code[ip] == 0xB1:
        tmp_list.append(0x7b)
        print("tmp = 0x7b")
        ip += 1
    elif code[ip] == 0xB2:
        tmp_list.append(0x2f)
        print("tmp = 0x2f")
        ip += 1
    elif code[ip] == 0xA4:
        print("mov dword[code[ip+1]], reg1")
        ip += 4
    elif code[ip] == 0xB3:
        tmp_list.append(0x37)
        print("tmp = 0x37")
        ip += 1
    elif code[ip] == 0xB4:
        tmp_list.append(0xe8)
        print("tmp = 0xe8")
        ip += 1
    elif code[ip] == 0xC1:
        print(f"reg1 = s[{code[ip + 1]}]")
        ip += 2
    elif code[ip] == 0xC7:
        print("cmp reg1, 0xCF1304DC")
        ip += 1
    elif code[ip] == 0xC8:
        print("cmp reg1, 0x283B8E84")
        ip += 1
    elif code[ip] == 0xC2:
        xor_cmp_list.append(code[ip + 1])
        print(f"cmp, reg1, {code[ip + 1]}")
        ip += 5
print(tmp_list)
print(xor_cmp_list)
